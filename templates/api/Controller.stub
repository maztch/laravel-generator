<?php namespace $NAMESPACE_API_CONTROLLER$;

use App\Models\$MODEL_NAME$;
use Illuminate\Http\Request;
use $BASE_CONTROLLER$ as AppBaseController;
use Response;

class $MODEL_NAME$APIController extends AppBaseController
{
	/** @var  $MODEL_NAME$Repository */
	private $$MODEL_NAME_CAMEL$;

	function __construct($MODEL_NAME $$MODEL_NAME_CAMEL$)
	{
		$this->$MODEL_NAME_CAMEL$ = $$MODEL_NAME_CAMEL$;
	}

	/**
	 * Display a listing of the $MODEL_NAME$.
	 * GET|HEAD /$MODEL_NAME_PLURAL_CAMEL$
	 *
	 * @return Response
	 */
	public function index()
	{
		$$MODEL_NAME_PLURAL_CAMEL$ = $this->$MODEL_NAME_CAMEL$->all();

		return Response::json([
			'data' => $$MODEL_NAME_PLURAL_CAMEL$->toArray(),
			'message' => "$MODEL_NAME_PLURAL$ retrieved successfully"
		]);
	}

	/**
	 * Show the form for creating a new $MODEL_NAME$.
	 * GET|HEAD /$MODEL_NAME_PLURAL_CAMEL$/create
	 *
	 * @return Response
	 */
	public function create()
	{
		// maybe, you can return a template for JS
	}

	/**
	 * Store a newly created $MODEL_NAME$ in storage.
	 * POST /$MODEL_NAME_PLURAL_CAMEL$
	 *
	 * @param Request $request
	 *
	 * @return Response
	 */
	public function store(Request $request)
	{
		if(sizeof($MODEL_NAME$::$rules) > 0)
			$this->validateRequestOrFail($request, $MODEL_NAME$::$rules);

		$input = $request->all();

		$$MODEL_NAME_PLURAL_CAMEL$ = $this->$MODEL_NAME_CAMEL$->create($input);

		return Response::json([
			'data' => $$MODEL_NAME_PLURAL_CAMEL$->toArray(),
			'message' => "$MODEL_NAME$ saved successfully"
		]);
	}

	/**
	 * Display the specified $MODEL_NAME$.
	 * GET|HEAD /$MODEL_NAME_PLURAL_CAMEL$/{id}
	 *
	 * @param  int $id
	 *
	 * @return Response
	 */
	public function show($id)
	{
		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$->find($id);

		return Response::json([
			'data' => $$MODEL_NAME_CAMEL$->toArray(),
			'message' => "$MODEL_NAME$ retrieved successfully"
		]);
	}

	/**
	 * Show the form for editing the specified $MODEL_NAME$.
	 * GET|HEAD /$MODEL_NAME_PLURAL_CAMEL$/{id}/edit
	 *
	 * @param  int $id
	 *
	 * @return Response
	 */
	public function edit($id)
	{
		// maybe, you can return a template for JS
	}

	/**
	 * Update the specified $MODEL_NAME$ in storage.
	 * PUT/PATCH /$MODEL_NAME_PLURAL_CAMEL$/{id}
	 *
	 * @param  int              $id
	 * @param Request $request
	 *
	 * @return Response
	 */
	public function update($id, Request $request)
	{
		$input = $request->all();

		/** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$->find($id);

		$MODEL_NAME_CAMEL$->fill($input, $id);

		$$MODEL_NAME_CAMEL$ = $$MODEL_NAME_CAMEL$->fresh();

		return Response::json([
			'data' => $$MODEL_NAME_CAMEL$->toArray(),
			'message' => "$MODEL_NAME$ updated successfully"
		]);
	}

	/**
	 * Remove the specified $MODEL_NAME$ from storage.
	 * DELETE /$MODEL_NAME_PLURAL_CAMEL$/{id}
	 *
	 * @param  int $id
	 *
	 * @return Response
	 */
	public function delete($id)
	{
		$this->$MODEL_NAME_CAMEL$->delete($id);

		return Response::json($id, "$MODEL_NAME$ deleted successfully");
	}

	/**
	 * Remove the specified $MODEL_NAME$ from storage.
	 * DELETE /$MODEL_NAME_PLURAL_CAMEL$/{id}
	 *
	 * @param  int $id
	 *
	 * @return Response
	 */
	public function destroy($id)
	{
		return $this->delete($id);
	}
}
