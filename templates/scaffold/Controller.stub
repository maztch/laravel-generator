<?php namespace $NAMESPACE_CONTROLLER$;

use App\Http\Requests;
use Illuminate\Http\Request;
use Flash;
use $BASE_CONTROLLER$ as AppBaseController;
use App\Models\$MODEL_NAME$;
use Response;

class $MODEL_NAME$Controller extends AppBaseController
{

	/** @var  $MODEL_NAME$Repository */
	private $$MODEL_NAME_CAMEL$;

	function __construct($MODEL_NAME$ $$MODEL_NAME_CAMEL$)
	{
		$this->$MODEL_NAME_CAMEL$ = $$MODEL_NAME_CAMEL$;
	}

	/**
	 * Display a listing of the $MODEL_NAME$.
	 *
	 * @return Response
	 */
	public function index()
	{
		$$MODEL_NAME_PLURAL_CAMEL$ = $this->$MODEL_NAME_CAMEL$->all();

		return view('$MODEL_NAME_PLURAL_CAMEL$.index')
			->with('$MODEL_NAME_PLURAL_CAMEL$', $$MODEL_NAME_PLURAL_CAMEL$);
	}

	/**
	 * Show the form for creating a new $MODEL_NAME$.
	 *
	 * @return Response
	 */
	public function create()
	{
		return view('$MODEL_NAME_PLURAL_CAMEL$.create');
	}

	/**
	 * Store a newly created $MODEL_NAME$ in storage.
	 *
	 * @param Create$MODEL_NAME$Request $request
	 *
	 * @return Response
	 */
	public function store(Request $request)
	{
		$input = $request->all();

		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$->create($input);

		Flash::success('$MODEL_NAME$ saved successfully.');

		return redirect(route('$MODEL_NAME_PLURAL_CAMEL$.index'));
	}

	/**
	 * Display the specified $MODEL_NAME$.
	 *
	 * @param  int $id
	 *
	 * @return Response
	 */
	public function show($id)
	{
		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$->find($id);

		if(empty($$MODEL_NAME_CAMEL$))
		{
			Flash::error('$MODEL_NAME$ not found');

			return redirect(route('$MODEL_NAME_PLURAL_CAMEL$.index'));
		}

		return view('$MODEL_NAME_PLURAL_CAMEL$.show')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
	}

	/**
	 * Show the form for editing the specified $MODEL_NAME$.
	 *
	 * @param  int $id
	 *
	 * @return Response
	 */
	public function edit($id)
	{
		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$->find($id);

		if(empty($$MODEL_NAME_CAMEL$))
		{
			Flash::error('$MODEL_NAME$ not found');

			return redirect(route('$MODEL_NAME_PLURAL_CAMEL$.index'));
		}

		return view('$MODEL_NAME_PLURAL_CAMEL$.edit')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
	}

	/**
	 * Update the specified $MODEL_NAME$ in storage.
	 *
	 * @param  int              $id
	 * @param Update$MODEL_NAME$Request $request
	 *
	 * @return Response
	 */
	public function update($id, Request $request)
	{
		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$->find($id);

		if(empty($$MODEL_NAME_CAMEL$))
		{
			Flash::error('$MODEL_NAME$ not found');

			return redirect(route('$MODEL_NAME_PLURAL_CAMEL$.index'));
		}

		$$MODEL_NAME_CAMEL$->fill($request->all());
		$$MODEL_NAME_CAMEL$->save();

		Flash::success('$MODEL_NAME$ updated successfully.');

		return redirect(route('$MODEL_NAME_PLURAL_CAMEL$.index'));
	}

	/**
	 * Remove the specified $MODEL_NAME$ from storage.
	 *
	 * @param  int $id
	 *
	 * @return Response
	 */
	public function delete($id)
	{
		$$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$->find($id);

		if(empty($$MODEL_NAME_CAMEL$))
		{
			Flash::error('$MODEL_NAME$ not found');

			return redirect(route('$MODEL_NAME_PLURAL_CAMEL$.index'));
		}

		$$MODEL_NAME_CAMEL$->delete($id);

		Flash::success('$MODEL_NAME$ deleted successfully.');

		return redirect(route('$MODEL_NAME_PLURAL_CAMEL$.index'));
	}



	/**
	 * Alias for delete, just to allow access without DELETE method
	 */
	public function destroy($id)
	{
		$this->delete($id);
	}
}
